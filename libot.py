import cv2
import logging
import telegram
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import qrcode
from qrcode.image.styledpil import StyledPilImage
from qrcode.image.styles.moduledrawers import RoundedModuleDrawer
from datetime import datetime, timedelta


# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "TELEGRAM TOKEN"
TARGET_CHAT_ID = "GROUP ID"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('*–ü—Ä–∏–≤–µ—Ç!*\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *QR-–∫–æ–¥*, –∏ —è –µ–≥–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É—é.', parse_mode=telegram.ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def handle_image(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_id = update.message.photo[-1].file_id
    file = context.bot.get_file(file_id)
    file.download('qr_code.jpg')

    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥
    qr_image = cv2.imread('qr_code.jpg')
    qr_detector = cv2.QRCodeDetector()
    data, bbox, straight_qrcode  = qr_detector.detectAndDecode(qr_image)
    if data != "":
        if "x512" in data:
            data = data.replace("x512", "")
            update.message.reply_text(f'‚úÖ –ö–Ω–∏–≥–∞ *"{data}"* —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.', parse_mode=telegram.ParseMode.MARKDOWN)
            send_to_target_group(data, update.message.from_user.username, update.message.date, True)
        else:
            update.message.reply_text(f'‚úÖ –ö–Ω–∏–≥–∞ *"{data}"* —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.', parse_mode=telegram.ParseMode.MARKDOWN)
            send_to_target_group(data, update.message.from_user.username, update.message.date, False)
    else:
        update.message.reply_text('‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', parse_mode=telegram.ParseMode.MARKDOWN) #üõë‚õî‚ùó

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏ –≤ –∞–¥–º–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –≥—Ä—É–ø–ø—É
def send_to_target_group(data: str, username: str, message_date: datetime, istrue: bool) -> None:
    message_date += timedelta(hours=6)
    formatted_date = message_date.strftime("%Y-%m-%d %H:%M:%S")
    bot = telegram.Bot(token=TOKEN)
    if istrue:
        bot.send_message(chat_id=TARGET_CHAT_ID, text=f'üìô –ö–Ω–∏–≥–∞: *{data}*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{username}*\n‚úèÔ∏è –°—Ç–∞—Ç—É—Å: *–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞*\n‚åö –í—Ä–µ–º—è: *{formatted_date}*', parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.send_message(chat_id=TARGET_CHAT_ID, text=f'üìô –ö–Ω–∏–≥–∞: *{data}*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{username}*\n‚úèÔ∏è –°—Ç–∞—Ç—É—Å: *–í–∑—è—Ç–∞*\n‚åö –í—Ä–µ–º—è: *{formatted_date}*', parse_mode=telegram.ParseMode.MARKDOWN)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /createqr
def create_qr(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /createqr
    text = " ".join(context.args)

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    
    qr2 = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )

    qr.add_data(text)
    qr.make(fit=True)

    qr2.add_data(text+"x512")
    qr2.make(fit=True)

    img = qr.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer())
    img.save('created_qr.png')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.message.reply_text('QR-–∫–æ–¥ –¥–ª—è –≤–∑—è—Ç–∏—è')
    context.bot.send_photo(update.message.chat_id, photo=open('created_qr.png', 'rb'))

    img = qr2.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer())
    img.save('created_qr.png')
    update.message.reply_text('QR-–∫–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è')
    context.bot.send_photo(update.message.chat_id, photo=open('created_qr.png', 'rb'))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def unknown(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TOKEN)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ—Ç updater
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("createqr", create_qr, pass_args=True))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.photo & ~Filters.command, handle_image))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.add_handler(MessageHandler(Filters.command, unknown))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    updater.idle()

if __name__ == '__main__':
    main()
